name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feat/coverage

jobs:
  test-and-coverage-with-report:
    runs-on: ubuntu-latest
    env:
      DISTRIBUTED_CACHE_URL: "redis://localhost:6379"
      ASPNETCORE_ENVIRONMENT: "Test"
      RUN_MIGRATIONS_ON_START: "true"
      PEDIDOS_API_URL: "http://localhost:5000"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Producao.sln

      - name: Build project
        run: dotnet build Producao.sln --configuration Release

      - name: Test
        run: dotnet test Producao.sln -c Release --no-build --no-restore --verbosity normal -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover 

      - name: Create Test Coverage Badge
        uses: simon-k/dotnet-code-coverage-badge@v1.0.0
        id: create_coverage_badge
        with:
          label: Unit Test Coverage
          color: brightgreen
          path: ./test/Producao.Tests/TestResults/coverage.opencover.xml
          gist-filename: producao-code-coverage.json
          gist-id: 87b5cd5307913b1bac586c27b7e9b324
          gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}

      - name: Print code coverage
        run: echo "Code coverage percentage ${{ steps.create_coverage_badge.outputs.percentage }}%"

      - name: Print badge data
        run: echo "Badge data ${{ steps.create_coverage_badge.outputs.badge }}"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
        with:
          reports: ./test/Producao.Tests/TestResults/coverage.opencover.xml
          targetdir: coveragereport
          reporttypes: Html_Dark;Badges

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coveragereport

  build-push-deploy:
    runs-on: ubuntu-latest
    needs: test-and-coverage-with-report  # SÃ³ executa se os testes passarem

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Debug - Listando arquivos na API
        run: ls -R src/Producao.Api

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: |
          cd src/Producao.Api
          dotnet restore Producao.Api.csproj

      - name: Build and publish
        run: |
          cd src/Producao.Api
          dotnet build Producao.Api.csproj -c Release --no-restore
          dotnet publish Producao.Api.csproj -c Release -o app/publish /p:UseAppHost=false

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Ensure certs folder exists
        run: mkdir -p certs

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/producao-api:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/producao-api:${{ github.sha }} \
            .

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/producao-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/producao-api:${{ github.sha }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install AWS CLI
        run: |
          sudo snap install aws-cli --classic

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig for AWS EKS
        run: |
          aws eks update-kubeconfig --region us-east-1 --name techchalenge-eks-cluster

      - name: Verify kubectl configuration
        run: |
          kubectl config view
          kubectl get nodes

      - name: Deploy to EKS Cluster
        run: |
          kubectl apply -f iac/kubernetes/namespace.yaml
          kubectl apply -f iac/kubernetes
          kubectl rollout status deployment/producao-dep -n fast-order
